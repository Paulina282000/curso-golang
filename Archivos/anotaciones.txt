##Modulo 1: Introduccion a GO
1. **Fundamentos de go**

2. **SIntaxis Basica**
    - Estructura de un programa go
    - Variables y constantes
    - Tipos de datos basicos (int, float, string,bool)

2. **Estructuras de control**
    ## Modulo 2: Progrmacion intermedia en go**

    ## Modulo 3: Concurrencia con GO**

    ## Modulo 4: Programacion Avanzada en Go**

    ## Modulo 5: Ecosistema y buenas practicas**

    ## Modulo 6: Temas especializados **

    ## Modulo 7: Proyecto final**

1. ** Desarrollo de un proyecto completo**


//funciones avanzadas 

*/   
- funcion normal: bloque de codigo nombra que recibe paramentros y devuelve valores
    se utiliza cuando queremos logica reutilizable con inputs/fixed outputs
- Funcion variaditica: funcion que acepta un numero variable de argumentos, se utiliza
    cuando no sabes cuantos valores llegaran.
- Funcion anonima: funcion sin nombre, usada inline. Callbacks, handlers, manejo de eventos
    cuando se le pasa otra funcion.
- Closure: Funcinon anonima que captura variables del contexto, se usa para mantener estado 
    privado entre llamadas. Es una funcnion que recuerda,
    

/*

*/
##PUNTEROS Y REFERENCIAS

    - concepto de PUNTEROS
    - operadores de PUNTEROS
    - PUNTEROS en funciones
    - Uso de punteros para optimizacion

    El puntero almacena la dirección (la “ubicación”) en memoria donde está guardado el valor 10. 
    Cuando desreferencias (*p), accedes a ese valor.

    ##Operadores de los punteros
    - & : obtiene la direccion de memoria de una variable (crea un puntero)
    -*: Accede al valor almacenado en la direccion apuntada por un puntero.
    &x → “dame la dirección donde está x”
    *p → “dame (o cambia) el valor que está en la dirección almacenada en p”

    ##Punteros en funciones 
    usamos puntero para pasar referencias a funciones.
    lo que permite modificar directamente el valor de una variable dentro de una funcion.

    ventajas:
    - eficiencia, ya quie reduce la cantiadad de memoria, al evitar copias innecesarias
    - modificaicon directa: permite modificar variables originales desde funciones o estructuras 
    - interoperativilidad: es clave para cuando se trabaja con Apis de bajo nivel
/*

*/
##ESTRUCTURAS Y METODOS##

    - definicion de estructuras(structs)-> definir modelos de datos claros
    - Metodos y receptores (receivers) -> encapsular comportamiento relacionado con ese modelo
    - embodding en Go (herencia implicita)-> cuando para varios tip[os comparten campos/metodos comunes y quieres evitar duplicacion.

    **structs**: tipo compuesto que agrupa campos nombrados de distintos tipos, bajo un mismo nombre, similar a los 
    objetos en otros lenguajes, no incluyen ni metodos, ni herencia.
    se usa para modelar entidades con atributos relacionados.
    **metodos (receivers)**: funcion asociada a un tipo (struct o cualquier tipo definido) que opera sobre
    su valor o puntero. Se usa para encapsular comportamiento especifico de un tipo, mantener API limpia.
    Son funciones que se asocian a un metodo definido como un struct. Para asociarlo se usa un receptor, que es un argumento especial,
    para que sepa que tipo pertenece. permite implementar comportamiento, de una froma similar a los emtodos en otros lenguajes.
    **Embedding**: Inclusion de struct dentro de otro para reutilizar campos y metodos (herencia implicita).
    no existe la herencia, pero se usa la tecnica embodding, permitiendo la reutilziar.
    EL Embedding permite que una estructura contenga otra estrutura como un campo mas, pero sin un nombre
    explicito pra dicho campo, esto resulta en una herencia implicita donde los campos de la estructura embedia,
    son accedodos desde la estrucutura que la tiene embebida como si fueran propias.
    las ventajas son que go utiliza composicion y no herencia lo que permite estructuras mas flecibles y menos acopladas.
    tambien permite la reutilizacion de estructuras de una manera menos rigida
    simplicidad, no necesitas modificadores de acceso como private, protected, etc.
    Se usa para compartir comportamiento/estado entre tipos sin herencia.
/*



*/
##INTERFACES##

    -definicion y uso de INTERFACES: es un tipo que define un conjunto de Metodos
    especificando el comportamiento que otros tipos deben 
    - polimorfismo en GO
    - Tipos vacios ('interface{}') y su uso

    Interface: es un conjunto de metodos, define comportamiento, no datos.
    Se usa para:
    - desacoplar codigo: Cualquier tipo que implemente esos metodos satisface la interface.
    - dependencia inversa: funciones reciben interfaces en lugar de tipos concretos.

    Polimorfismo en Go: Se logra implicitamente, no hay 'implements'
    un tipo satisface una interface si tiene todos sus metodos
    se logra atraves de las interfaces, 
    - Tipo vacio (interface{})
    Representa cualquier valor, porque no exige metodos.
    Util para colecciones heterogeneas, JSON dinamico o APIs genericas

    Interfaces: contratos de comportamiento--> Facilitan pruebas, modularidad y extensibilidad.
    Polimorfismo: distintos tipos pueden "hablar un mismo idioma" si implementan la misma interface
    interface{}: tiupo generico para cualquier valor; hay que usarlo con precaucion por que se pierde seguridad.
/*