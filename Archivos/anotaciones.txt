##Modulo 1: Introduccion a GO
1. **Fundamentos de go**

2. **SIntaxis Basica**
    - Estructura de un programa go
    - Variables y constantes
    - Tipos de datos basicos (int, float, string,bool)

2. **Estructuras de control**
    ## Modulo 2: Progrmacion intermedia en go**

    ## Modulo 3: Concurrencia con GO**

    ## Modulo 4: Programacion Avanzada en Go**

    ## Modulo 5: Ecosistema y buenas practicas**

    ## Modulo 6: Temas especializados **

    ## Modulo 7: Proyecto final**

1. ** Desarrollo de un proyecto completo**


//funciones avanzadas 

*/   
- funcion normal: bloque de codigo nombra que recibe paramentros y devuelve valores
    se utiliza cuando queremos logica reutilizable con inputs/fixed outputs
- Funcion variaditica: funcion que acepta un numero variable de argumentos, se utiliza
    cuando no sabes cuantos valores llegaran.
- Funcion anonima: funcion sin nombre, usada inline. Callbacks, handlers, manejo de eventos
    cuando se le pasa otra funcion.
- Closure: Funcinon anonima que captura variables del contexto, se usa para mantener estado 
    privado entre llamadas. Es una funcnion que recuerda,
    

/*

*/
##PUNTEROS Y REFERENCIAS

    - concepto de PUNTEROS
    - operadores de PUNTEROS
    - PUNTEROS en funciones
    - Uso de punteros para optimizacion

    El puntero almacena la dirección (la “ubicación”) en memoria donde está guardado el valor 10. 
    Cuando desreferencias (*p), accedes a ese valor.

    ##Operadores de los punteros
    - & : obtiene la direccion de memoria de una variable (crea un puntero)
    -*: Accede al valor almacenado en la direccion apuntada por un puntero.
    &x → “dame la dirección donde está x”
    *p → “dame (o cambia) el valor que está en la dirección almacenada en p”

    ##Punteros en funciones 
    usamos puntero para pasar referencias a funciones.
    lo que permite modificar directamente el valor de una variable dentro de una funcion.

    ventajas:
    - eficiencia, ya quie reduce la cantiadad de memoria, al evitar copias innecesarias
    - modificaicon directa: permite modificar variables originales desde funciones o estructuras 
    - interoperativilidad: es clave para cuando se trabaja con Apis de bajo nivel
/*

*/
##ESTRUCTURAS Y METODOS##

    - definicion de estructuras(structs)-> definir modelos de datos claros
    - Metodos y receptores (receivers) -> encapsular comportamiento relacionado con ese modelo
    - embodding en Go (herencia implicita)-> cuando para varios tip[os comparten campos/metodos comunes y quieres evitar duplicacion.

    **structs**: tipo compuesto que agrupa campos nombrados de distintos tipos, bajo un mismo nombre, similar a los 
    objetos en otros lenguajes, no incluyen ni metodos, ni herencia.
    se usa para modelar entidades con atributos relacionados.
    **metodos (receivers)**: funcion asociada a un tipo (struct o cualquier tipo definido) que opera sobre
    su valor o puntero. Se usa para encapsular comportamiento especifico de un tipo, mantener API limpia.
    Son funciones que se asocian a un metodo definido como un struct. Para asociarlo se usa un receptor, que es un argumento especial,
    para que sepa que tipo pertenece. permite implementar comportamiento, de una froma similar a los emtodos en otros lenguajes.
    **Embedding**: Inclusion de struct dentro de otro para reutilizar campos y metodos (herencia implicita).
    no existe la herencia, pero se usa la tecnica embodding, permitiendo la reutilziar.
    EL Embedding permite que una estructura contenga otra estrutura como un campo mas, pero sin un nombre
    explicito pra dicho campo, esto resulta en una herencia implicita donde los campos de la estructura embedia,
    son accedodos desde la estrucutura que la tiene embebida como si fueran propias.
    las ventajas son que go utiliza composicion y no herencia lo que permite estructuras mas flecibles y menos acopladas.
    tambien permite la reutilizacion de estructuras de una manera menos rigida
    simplicidad, no necesitas modificadores de acceso como private, protected, etc.
    Se usa para compartir comportamiento/estado entre tipos sin herencia.
/*



*/
##INTERFACES##

    -definicion y uso de INTERFACES: es un tipo que define un conjunto de Metodos
    especificando el comportamiento que otros tipos deben 
    - polimorfismo en GO
    - Tipos vacios ('interface{}') y su uso

    Interface: es un conjunto de metodos, define comportamiento, no datos.
    Se usa para:
    - desacoplar codigo: Cualquier tipo que implemente esos metodos satisface la interface.
    - dependencia inversa: funciones reciben interfaces en lugar de tipos concretos.

    Polimorfismo en Go: Se logra implicitamente, no hay 'implements'
    un tipo satisface una interface si tiene todos sus metodos
    se logra atraves de las interfaces, 
    - Tipo vacio (interface{})
    Representa cualquier valor, porque no exige metodos.
    Util para colecciones heterogeneas, JSON dinamico o APIs genericas

    Interfaces: contratos de comportamiento--> Facilitan pruebas, modularidad y extensibilidad.
    Polimorfismo: distintos tipos pueden "hablar un mismo idioma" si implementan la misma interface
    interface{}: tiupo generico para cualquier valor; hay que usarlo con precaucion por que se pierde seguridad.
/*

##CONCURRENCIA EN GO##
    - Introduccion a Gorutines: son hilos de ejecucion ligeros, permitiendole al programa realizar tareas en simultaneo
    sin tener que esperar que una tarea termine para comenzar la siguiente. son eficiente ya que son mas ligeros qeu los tradicionales, por lo tanto 
    no sobre cargan el sistema. el modelo de concurrencia es facil de administrar ya que ofrece herramientas como canales para sincronizar y comunicar de maneraeficiente. 
    Funcion ligera que Go ejecuta de forma concurrecte. Se usa para ejecutar tareas en paralelo
    sin bloquear el flujo principal.
    - Creacion y manejo de Goroutines
    Anteponer go a la llamada de funcion. Se usa comunmente co go miFuncion() lanza esa funcion enbackground
    inmediantamente,
    - Ejecucion concurrente
    Varias gorutines corren al mismo tiempo gestionadas por el scheduler de Go.
    Se usa para realizar I/O (input/output), calculos o manejar multiples peticiones simultaneamente.

##CANALES O CHANNELS##
    - Concepto y uso de canales:
    Mecanismo nativo de go para comunicar datos entre gorutines de forma segura
    Y sincronizada. actua como conducto donde una gorutine puede enviar un valor y otra puede recibirlo.
    - Envio y recepcion de datos a traves de canales
    Enviar un canal: ch <- value
    Recibir de una canal: value := <-CHANNELS
    - canales sin buffers y con buffers
        Sin buffer: el emisor espera hasta que el receptor lea, se usa para la sincronizacion estricta.
        COn buffer: Eminisor bloquea solo cuando buffer lleno; receprtor cuando vacio. se usa para colas temporales, desacoplar ritmo.
    - Canales de cierre ('close')
    cerrar un canal indica que no habra mas envios
    receptores pueden seguir leyendo hasta agotar valores; despues reciben el zero-value.

    RESUMEN:
    - Canal sin buffer: sincroniza exactamente emisor <-> receptor
    - Canal con buffer: permite almacenar hasta N valores antes de bloquear.
    - close(ch): se;aliza "no mas envios"; util para loops de lectura (for v := range ch)

##SELECT y MULTIPLEXACION##

    - Uso de 'select' para sincronizacion:construccion que permite trabajar con multiples canales al mismo tiempo.
    se usa cuando queremos sincronizar operaciones en canales.
    select es como un switch pero para operaciones de canal. Permite esperar en multiples 
    canales simultaneamente, ejecutando el caso que este listo primero.
    - Multiplexacion de canales: Consiste en manejar multiples canales al mismo tiempo. 
    La multiplexacion uns select para combinar datos de varios canales en uno solo flujo logico.
    Util para leer de multiples fuentes concurrentes sin bloquear ni una sola.
    - Patrones comunes de concurrencia en Go

    Patron: 
    - Fan-out/ fan-in : varios productores->multiples gorutines generan datos; un consumidor los fusiona.
    por ejemplo, multiplexar resultados de varias APIs en un canal unificado.
    - Worker pool: Limita el numero de gorutines trabajando en tareas para controlar recursos. por ejemplo,
    pool de 5 workers leyendo trabajos de un canal de tareas.
    - Timeout : Usa select + time.after para cancelar operaciones que tarden demasiado.

##PROGRAMACION AVANZADA EN GO##
    - **Manejo de errores**
            - Error handling basico ('error')
            Que es : el tipo de error es simplemente una interfaz con un metodo Error() string.
            Uso: Las funciones devuelve un valor de tipo error como ultimo retorno; se comprueba if err != nil{...}

            - Errores personalizados
            Que es: crear tus propios tipos que implementan la interfaz error para agregar contexto (codigos, campos adicionales)
            Uso: Facilita diferenciar errores y transportar informacion extra
            - Panics y recovers
            Panic: detiene la ejecucion normal inmediatamente y comienza a hacer "unwind" del stack,
            ejecutando defer antes de terminar el programa (similar a una excepcion no controlada)
            Recover: Solo funciona dentro de un defer y captura un panic, permitiendo continuar la 
            ejecucion en lugar de terminar el programa.
            Uso: Reservado para errores criticos o situaciones inesperadas que no deberian ocurrir
            durante un flujo normal; recover se usa para construir mecanismos de contencion (por ejemplo, 
            en servidores HTTP para evita que un panic derrbe todo el servicio)

    - **Programacion Orientada a Objetos**
        - Diferencias entre Go y otros lenguajes OPP
        La herencia no existe en go, solo embedding de structs
        Encapsulacion en go se trabaja siendo publica cuando el nombre inicia con Mayuscula, no maneja
        modificadores como POO (private,public,protectedF)
        Polimorfismo en POO esta basado en jerarquias de clases, y en Go esta basado en interfaces implicitas (duck typing)
        Clases en POO tipos que combinan datos y comportamiento, en go Struct + metodos separados
        Los connstructores son metodos especiales de inicializacion, en go funciones de newType(..)
        - Emulacion de patrones OOP con structs e interfaces
        - Inyeccion de dependencias en Go

    - **Manipulacion de Archivos**
        - Lectura y escritura de Archivos
        Operaciones para abrir, leer, crear o modificar archivos de texto o binarios en disco.
        Uso en Go: se emplean funciones del paquete os (os.open, os.create, os.openFile) y paquetes
        auxiliares como io/ioutil, bufio o io para leer y escribir datos.
        Ejemplo: leer un archivo de configuracion o escribir registros(logs) en un archivo.

        - Manejo de archivos binarios : almacenar info en disco
        Def: procesar archivos que contienen datos en formato no textual (por ejemplo, imagenes, audio,archivos, comprimidos),
        donde los datos se representan como secuencia de bytes.
        Uso en go: Utiliza funciones del paquete os y io para leer o escribir datos en bruto. Para interpretar o construir 
        datos binarios, se puede usar el paquete encoding/binary.
        Ejemplo: leer los bytes de una imagen para precesarla o escribir datos binarios para comunicarse
        con dispositivo externo.
        - Trabajo con JSON y XML
        Definicion: Manipulacion de datos estructurados en formatos de intercambio ampliamente usados:
            - JSON: Formato ligero y legible para humanos, muy comun en APIs web.
            - XML: El paquete encoding/xml ofrece funcionalidades similares a XML.
        Ejemplo practico: Convertir un estrutura de datos a JSON para enviar una respuesta en una API REST 
        o leer un archivo XML para cargar configuraciones.

##ECOSISTEMA Y Y BUENAS PRACTICAS##
    -Modulos y paquetes
    paquete: es una unidad basica de organizacion de codigo en Go. cada archivo empiezacon package nombre.
    Agrupa funciones, tipos y variables relacionadas. Se usa para reutilizar logica, compartir codigo entre archivos'
    y proyectos.
    Modulo: Conjunto de paquetes versionados juntos. Representados por un archivo go.mod en la raiz.
    Se usa para definir la version de tu proyecto y gestionar dependencias externas.
        - Creacion y uso de paquete
        - Organizacion en go
        Un paquete por directorio: cada carpeta es un paquete.
        Seperar responsabilidades: handlers/, models/,services/
        Nombre corto y descriptivo : evita nombres genericos.
        - Gestion de dependencias con Go modules

        Buenas practicas:
        - Versiona tu modulo semanticamente(v1.2.3)
        - Usa rutas de importacion completas (github.com/..)
        - Ejecuta go fmt y go vet antes de commitear
        - Revisa vulnerabilidades con go mod tidy y herramientas como govulncheck