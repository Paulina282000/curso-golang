##Modulo 1: Introduccion a GO
1. **Fundamentos de go**

2. **SIntaxis Basica**
    - Estructura de un programa go
    - Variables y constantes
    - Tipos de datos basicos (int, float, string,bool)

2. **Estructuras de control**
    ## Modulo 2: Progrmacion intermedia en go**

    ## Modulo 3: Concurrencia con GO**

    ## Modulo 4: Programacion Avanzada en Go**

    ## Modulo 5: Ecosistema y buenas practicas**

    ## Modulo 6: Temas especializados **

    ## Modulo 7: Proyecto final**

1. ** Desarrollo de un proyecto completo**


//funciones avanzadas 

*/   
- funcion normal: bloque de codigo nombra que recibe paramentros y devuelve valores
    se utiliza cuando queremos logica reutilizable con inputs/fixed outputs
- Funcion variaditica: funcion que acepta un numero variable de argumentos, se utiliza
    cuando no sabes cuantos valores llegaran.
- Funcion anonima: funcion sin nombre, usada inline. Callbacks, handlers, manejo de eventos
    cuando se le pasa otra funcion.
- Closure: Funcinon anonima que captura variables del contexto, se usa para mantener estado 
    privado entre llamadas. Es una funcnion que recuerda,
    

/*

*/
##PUNTEROS Y REFERENCIAS

    - concepto de PUNTEROS
    - operadores de PUNTEROS
    - PUNTEROS en funciones
    - Uso de punteros para optimizacion

    El puntero almacena la dirección (la “ubicación”) en memoria donde está guardado el valor 10. 
    Cuando desreferencias (*p), accedes a ese valor.

    ##Operadores de los punteros
    - & : obtiene la direccion de memoria de una variable (crea un puntero)
    -*: Accede al valor almacenado en la direccion apuntada por un puntero.
    &x → “dame la dirección donde está x”
    *p → “dame (o cambia) el valor que está en la dirección almacenada en p”

    ##Punteros en funciones 
    usamos puntero para pasar referencias a funciones.
    lo que permite modificar directamente el valor de una variable dentro de una funcion.

    ventajas:
    - eficiencia, ya quie reduce la cantiadad de memoria, al evitar copias innecesarias
    - modificaicon directa: permite modificar variables originales desde funciones o estructuras 
    - interoperativilidad: es clave para cuando se trabaja con Apis de bajo nivel
/*