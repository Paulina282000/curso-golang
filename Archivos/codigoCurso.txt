// Go Basics Example
// Este archivo muestra ejemplos ordenados de sintaxis básica en Go: variables, tipos, control de flujo, colecciones y funciones.

package main

import (
	"fmt"
)

func main2() {
	// ----- Salida inicial -----
	fmt.Println("Hello, World desde Go!")

	// ----- Variables y Constantes -----
	var nombre string = "Juan" // Declaración explícita
	apellido := "Perez"        // Declaración implícita
	edad := 25                 // Inferencia de tipo

	const (
		id = 1234567890 // Constante entera
		pi = 3.14159    // Constante float
	)
	fmt.Println("Nombre:", nombre, "Apellido:", apellido, "Edad:", edad)
	fmt.Println("ID:", id, "Pi:", pi)

	// ----- Tipos Numéricos -----
	var (
		entero8  uint8   = 255
		entero16 uint16  = 65535
		f32      float32 = 2.5
		f64      float64 = 2.5
	)
	fmt.Println(entero8, entero16, f32, f64)

	// ----- Otros Tipos -----
	cadena := "Hola, mundo!"
	booleano := true
	fmt.Println("Cadena:", cadena, "Booleano:", booleano)

	// ----- Operadores Aritméticos -----
	num1, num2 := 10, 20
	fmt.Println("Suma:", num1+num2)
	fmt.Println("Resta:", num1-num2)
	fmt.Println("Multiplicación:", num1*num2)
	fmt.Println("División:", num1/num2)
	fmt.Println("Módulo:", num1%num2)

	// ----- Operadores Lógicos -----
	adulto, permiso := true, false
	fmt.Println("Puede entrar?", adulto && permiso)
	fmt.Println("Puede salir?", adulto || permiso)
	fmt.Println("No puede salir?", !adulto)

	// ----- Control de Flujo -----
	if edad >= 18 {
		fmt.Println("Mayor de edad")
	} else {
		fmt.Println("Menor de edad")
	}

	dia := 10
	switch dia {
	case 1:
		fmt.Println("Lunes")
	case 2:
		fmt.Println("Martes")
	default:
		fmt.Println("Día inválido")
	}

	// ----- Bucles -----
	for i := 0; i <= 5; i++ {
		fmt.Println("i =", i)
	}

	// ----- Arrays -----
	arrNombres := [3]string{"Juan", "Maria", "Pedro"}
	fmt.Println("Array:", arrNombres)

	// ----- Slices -----
	sliceFrutas := []string{"Manzana", "Pera", "Naranja"}
	sliceFrutas = append(sliceFrutas, "Uva")
	fmt.Println("Slice:", sliceFrutas)

	// ----- Maps -----
	edades := map[string]int{"Juan": 20, "Maria": 25, "Pedro": 30}
	fmt.Println("Map:", edades)

	// ----- Range en Colecciones -----
	numeros := []int{10, 20, 30, 40, 50}
	for idx, num := range numeros {
		fmt.Println(idx, num)
	}

	capitales := map[string]string{"Argentina": "Buenos Aires", "Brasil": "Brasilia", "Chile": "Santiago"}
	for pais, capital := range capitales {
		fmt.Println(pais, "->", capital)
	}

	// ----- Funciones -----
	suma, resta := sumarYRestar(10, 20)
	fmt.Println("Suma:", suma, "Resta:", resta)
}

// sumarYRestar devuelve la suma y resta de dos enteros
func sumarYRestar(a, b int) (int, int) {
	return a + b, a - b
}
multiplicar := func(a, b int) int {
		return a * b
	}

	resultado := multiplicar(2, 3)
	fmt.Println("El resultado de la multiplicacion es:", resultado)

	//crear un funcion e imprimirla

	doble := func(n int) int {
		return n * 2
	}(5) //aca se esta ejecutando la funcion anonima y se esta imprimiendo el resultado

	fmt.Println("El doble de es:", doble)

	//funciones anonimas como argumentos de otras funciones

	//Usar funcion anonima sin asignar a una variable

	fmt.Println("La suma es:", func(x, y int) int {
		return x + y
	}(5, 3))


//las funciones son de primer orden, es decir, se pueden asignar a variables, pasarlas como argumentos y devolverlas como resultado
//para esto son muy utiles las funcinoes anonimas

//funciones como valores

//funciones retornando otras funciones

func multiplicacion(factor int) func(int) int {
	return func(valor int) int {
		return valor * factor
	}
}

//funciones anonimas asigfnadas a una variable
func main() {

	//usamos la funcinon creada anteriormente

	var_multiplicar := multiplicacion(2)

	fmt.Println("2x3:", var_multiplicar(3))

	//funciones como argumentos de otras funciones

}

//COUSERS

	// funcino que no usa closures

	counter := func() int {
		count := 0
		count++
		return count
	}

	fmt.Println(counter())
	fmt.Println(counter())

	//el clouseer va a recordar el valor de count

	// funcino que usa closures

	counter2 := func() func() int {
		count := 0
		return func() int {
			count++
			return count
		}
	}()
	fmt.Println(counter2())
	fmt.Println(counter2())
	fmt.Println(counter2())

	// el clouseer va a recordar el valor de count

RECURSION 

package main

import "fmt"

//CRECION DE FUNCIONES RECURSIVAS

func suma(n int) int {
	if n == 0 {
		return 0
	}
	return n + suma(n-1)
}

func main() {

	//recursion  es una tecnica de la programacion
	//donde una funcion se llama a si misma de forma directa o indirecta,
	//para resolver un problema, subdividiendolo en subproblemas mas pequeños

	//en GO se implementa definiendo una funcion que tiene una condicion base para
	//detener la recursion y una llamada recursiva para resolver el problema

	//codicion base: hasta cuando se puede llamar para no entrar en bucle infinito
	//llamada recursiva: se llama a la funcion dentro de si misma, con argumentos que cada ves que
	//se llamen van a se modificados

	//sumar un numero de 1 a n

	numero := 5
	resultado := suma(numero)
	fmt.Println("La suma de los numeros de 1 a", numero, "es:", resultado)

}

package main

import "fmt"

func main() {

	//los puntero permiten trabajar con la direccion de memoria de una
	//variable en lugar de su valor.
	// un puntero almacena la direccion de memoria de una variable
	//y permite acceder y modificar su valor directamente.
	//permite la modficacion de la variable desde diversos lugares del sistema
	//optimizan el uso de memoria al permitir compartir datos entre funciones

	//declaracion de punteros

	//declara una variable normal

	x := 10

	//declara un puntero a un int

	var puntero *int

	//asigna la direccion de memoria de x a puntero

	puntero = &x

	fmt.Println("Direccion de la memoria de x:", puntero)
	fmt.Println("Valor de x a traves del puntero:", *puntero)

}

package main

import "fmt"

//##Punteros y funciones

func modificarValor(ptr *int) {
	*ptr = 50
}

func main() {
	//declaracion de variables

	x := 10

	fmt.Println("Valor de x antes de la funcion:", x)

	//pasar la direccion de memoria de x a la funcion
	modificarValor(&x)

	fmt.Println("Valor de x despues de la funcion:", x)

}

##structs

package main

import "fmt"

type Book struct {
	title  string
	author string
	year   int
	pages  int
	price  float64
}

func main() {

	//structs
	/*
		type NombreStruct struct {
			campo1 tipo1
			campo2 tipo2
		}
	*/

	//declaracion de variables

	//CREAR VARIABLES DE TIPO STRUCT BOOK

	myBook := Book{
		title:  "The Go Programming Language",
		author: "Alan A. A. Donovan",
		year:   2016,
		pages:  432,
		price:  59.99,
	}

	fmt.Println("Libro:", myBook.title)
	fmt.Println("Autor:", myBook.author)
	fmt.Println("Año:", myBook.year)
	fmt.Println("Paginas:", myBook.pages)
	fmt.Println("Precio:", myBook.price)

}

package main

import "fmt"

//definicion de la estructura
type Book struct {
	title  string
	author string
	year   int
	pages  int
	price  float64
}

//metodo asociado a la estructura Book pra mostrar detalles del libro

func (b Book) DisplayInfo() {
	fmt.Println("Detalles del libro:")
	fmt.Println("--------------------------------")
	fmt.Printf("Titulo: %s\n", b.title)
	fmt.Printf("Autor: %s\n", b.author)
	fmt.Printf("Año: %d\n", b.year)
	fmt.Printf("Paginas: %d\n", b.pages)
	fmt.Printf("Precio: %.2f\n", b.price)
}

// Metodo asociado para aplicar descuentos al precio del libro

func (b *Book) AplicarDescuento(descuento float64) {
	b.price = b.price - descuento
}

func main() {

	/* estructura de los metodos con receptores
	//sintaxis revicer

	func(revicer TipoDelReciver) nombreDelMetodo(parametros) (tipoDeRetorno) {
		//codigo del metodo
	}
	//Hay distintos tipos de receptores:
	// los por valor: el metodo trabaja con una copia del valor del receptor
	// los por puntero: el metodo trabaja con el valor original
	*/

	//creamos su instancia

	myBook := Book{
		title:  "El secreto de la felicidad",
		author: "Juan Perez",
		year:   2024,
		pages:  300,
		price:  25.99,
	}

	myBook.DisplayInfo()

	myBook.AplicarDescuento(10)

	myBook.DisplayInfo() // DESCUENTO APLICADO DE 10 PESOS

	/*
		Usamos receptores por valor cuando:
		- si el metodo no necesita modificar el valor del receptor, como el displayinfo
		- si el recepro no contiene muchos datos
		Usamos receptores por puntero cuando:
		- si el metodo necesita modificar el valor del receptor
		- si el receptor es una estructura grande o compleja
	*/
}

##EMBBEDING##
package main

import "fmt"

type Empleado struct {
	Nombre   string
	Apellido string
	Edad     int
	Email    string
}

func (e Empleado) MostrarDetalles() {
	fmt.Printf("Nombre: %s\n", e.Nombre)
	fmt.Printf("Apellido: %s\n", e.Apellido)
	fmt.Printf("Edad: %d\n", e.Edad)
	fmt.Printf("Email: %s\n", e.Email)
}

type Gerente struct {
	Empleado
	Departamento string
}

func (g Gerente) MostrarDetallesGerente() {
	g.MostrarDetalles()
	fmt.Printf("Departamento: %s\n", g.Departamento)
}

func main() {
	emp := Empleado{
		Nombre:   "Juan",
		Apellido: "Perez",
		Edad:     30,
		Email:    "juan.perez@example.com",
	}

	ger := Gerente{
		Empleado: Empleado{
			Nombre:   "Ana",
			Apellido: "Gomez",
			Edad:     53,
			Email:    "ANA.GOMEZ@example.com",
		},
		Departamento: "IT",
	}
	emp.MostrarDetalles()
	ger.MostrarDetallesGerente()
}

/*
	Embedding sintaxis:

	type EstruturaA struct {
		campo1 string
		campo2 int
	}

	type EstruturaB struct {
		EstruturaA
		campo3
	}




##INTERFACES##
// Go: Ejemplo de interfaces y polimorfismo
package main

import "fmt"

//interface vacia:
//interface{}: tipo vacio, representa cualquier valor
//util para:
//- funciones que pueden recibir cualquier tipo de dato
//- estructuras de datos heterogeneas (ej: JSON)
//- pruebas unitarias (ej: mock objects)

//sintaxis interface vacia:
//interface{}

// Shape define un comportamiento común para cualquier figura
type Shape interface {
	Area() float64
}

// Circle representa un círculo con su radio
type Circle struct {
	radius float64
}

func (c Circle) Area() float64 {
	return 3.1416 * c.radius * c.radius
}

// Rectangle representa un rectángulo con ancho y alto
type Rectangle struct {
	width, height float64
}

func (r Rectangle) Area() float64 {
	return r.width * r.height
}

// printArea acepta cualquier Shape e imprime su área
func printArea(s Shape) {
	fmt.Println("Área:", s.Area())
}

func main() {
	circle := Circle{radius: 5}
	rectangle := Rectangle{width: 3, height: 4}

	printArea(circle)    // Polimorfismo: Circle implementa Shape
	printArea(rectangle) // Polimorfismo: Rectangle implementa Shape
}


*/

*/
##HILOS y CONCURRENCIA##

package main

import "fmt"

// manejo de gorutines:
// las gorutines son funciones ligeras que se ejecutan concurrentemente.
// se antepone la palabra reservada go a la llamada de la funcion.
// usando go concurrentemente puede pasar que no se ejecuten en orden, por que se ejecutan en paralelo.
//la sin go que termina de ejecutarse primero, sera la que se ejecute primero.
//para que se terminen de ejecutar las gorutines se usa el waitgroup
func say(s string) {
	for i := 0; i < 5; i++ {
		fmt.Println(s)
	}
}

func main() {
	go say("Hello")
	say("world")
}

import (
    "fmt"
    "time"
)

func main() {
    go say("Hello")
    say("world")
    time.Sleep(100 * time.Millisecond) // espera a que la goroutine termine
}


//FORMA CORRECTA DE SINCRONIZAR GO RUTINES

package main

import (
	"fmt"
	"sync"
)

func say(s string) {
	for i := 0; i < 5; i++ {
		fmt.Println(s)
	}
}

func main() {
	var wg sync.WaitGroup
	wg.Add(1)

	go func() {
		defer wg.Done()
		say("Hello")
	}()

	say("world")
	wg.Wait() // espera hasta que todas las goroutines terminen
}
/*

*/
##CHANNELS##
// canales en go:
// son un mecanismo para sincronizar datos entre gorutines
// se declaran con la palabra reservada chan
// se pueden usar para enviar y recibir datos entre gorutines
// se pueden usar para sincronizar la ejecucion de gorutines
// se pueden usar para comunicar datos entre gorutines
// se pueden usar para sincronizar la ejecucion de gorutines

package main

import "fmt"

func main() {
	canal := make(chan int) // creacion del canal
	canal <- dato           // usando el canal para enviar datos
	dato := <-canal         // usando el canal para recibir datos
}


channel sin buffer

package main

import "fmt"

func main() {
	canal := make(chan string) 

	//gorutine para enviar un mensaje, es sin buffer, por que el canal especificado es un string

	go func() {
		canal <- "Hola desde un canal"
	}()

	//recibir el mensaje
	mensaje := <-canal
	fmt.Println(mensaje)
}

##Canal con buffer 2##
solo almacena esos dos mensajes, si se enviace otro da error, ya 1que la 
capacidad es de 2 mensajes 

package main

import "fmt"

func main() {
	canal := make(chan string, 2) // se agrega el 2, por lo que el canal puede almacenar 2 mensajes

	//gorutine para enviar un mensaje, es sin buffer, por que el canal especificado es un string

	canal <- "Hola desde un canal"
	canal <- "Hola desde un canal 2"

	//recibir el mensaje

	fmt.Println(<-canal)
	fmt.Println(<-canal)
}
##Cerrar canales##
package main

import "fmt"

func main() {
	canal := make(chan string, 2) // se agrega el 2, por lo que el canal puede almacenar 2 mensajes

	//gorutine para enviar un mensaje, es sin buffer, por que el canal especificado es un string

	canal <- "Hola desde un canal"
	canal <- "Hola desde un canal 2"

	//cerrar el canal

	close(canal)

	for valor := range canal {
		fmt.Println(valor)
	}

	//recibir el mensaje

	fmt.Println(<-canal)
	fmt.Println(<-canal)
}

/*

##UUSO DEL SELECT##
package main

import (
	"fmt"
	"time"
)

func main() {
	canal1 := make(chan string)
	canal2 := make(chan string)

	go func() {
		time.Sleep(time.Second)
		canal1 <- "Mensaje desde el canal 1"
	}()

	go func() {
		time.Sleep(2 * time.Second)
		canal2 <- "Mensaje desde el canal 2"
	}()

	for i := 0; i < 2; i++ {
		select {
		case mensaje1 := <-canal1:
			fmt.Println(mensaje1)
		case mensaje2 := <-canal2:
			fmt.Println(mensaje2)
		}
	}
}

##MULTIPLEXACION##

package main

import (
	"fmt"
)

func main() {
	//multiplexacion de canales
	//crear 2 canal de tipo string
	canal1 := make(chan string)
	canal2 := make(chan string)

	//crear una goroutine para enviar datos al canal
	go func() {
		for {
			canal1 <- "Mensaje 1"
		}
	}()
	go func() {
		for {
			canal2 <- "Mensaje 2"
		}
	}()

	//usar select para escuchar los mensajes de ambos canales

	for i := 0; i < 5; i++ {
		select {
		case mensaje1 := <-canal1: //si el canal 1, tiene datos, se imprime
			fmt.Println(mensaje1)
		case mensaje2 := <-canal2: //si el canal 2, tiene datos, se imprime
			fmt.Println(mensaje2)
		}
	}

}
##Combinacion de canales##

// Go: Ejemplo de Fan‑In usando canales
package main

import (
	"fmt"
)

func main() {
	// Creamos dos canales de origen
	canal1 := make(chan string)
	canal2 := make(chan string)

	// Lanzamos goroutines que envían mensajes a cada canal y luego los cierran
	go func() {
		canal1 <- "Mensaje A desde canal1"
		close(canal1)
	}()
	go func() {
		canal2 <- "Mensaje B desde canal2"
		close(canal2)
	}()

	// Combinamos ambos canales en uno solo (fan‑in)
	salida := combinar(canal1, canal2)

	// Leemos todos los mensajes del canal combinado hasta que se cierre
	for mensaje := range salida {
		fmt.Println(mensaje)
	}
}

// combinar une dos canales de entrada en un único canal de salida
// Objetivo: simplificar la recepción de datos de múltiples fuentes
func combinar(c1, c2 <-chan string) <-chan string {
	salida := make(chan string)

	go func() {
		for msg := range c1 {
			salida <- msg
		}
		for msg := range c2 {
			salida <- msg
		}
		close(salida)
	}()

	return salida
}

##MANEJO DE ERRORES##

package main

import (
	"errors"
	"fmt"
)

// manejo de errores
func dividir(a, b float64) (float64, error) {
	if b == 0 {
		return 0, errors.New("division por cero")
	}
	return a / b, nil
}

func main() {
	resultado, err := dividir(10, 0)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	fmt.Println("Resultado:", resultado)

}

##ERROR PERSONALIZADO##

package main

import (
	"fmt"
)

// manejo de errores personalizados

type DividirError struct {
	Dividiendo float64
	Divisor    float64
}

func (e *DividirError) Error() string {
	return fmt.Sprintln("No se puede dividir por cero", e.Dividiendo, e.Divisor)
}

func dividir(a, b float64) (float64, error) {
	if b == 0 {
		return 0, &DividirError{a, b}
	}
	return a / b, nil
}

func main() {
	resultado, err := dividir(10, 0)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	fmt.Println("Resultado:", resultado)
}

##ERRORES CON PANIC Y RECOVER##

package main

import (
	"fmt"
)

// manejo de errores con panic y recover

func dividirConPanic(a, b float64) float64 {
	if b == 0 {
		panic("division por cero") //panic es una funcion que detiene la ejecucion del programa y lanza un error
	}
	return a / b
}

func manejarPanic() {
	if r := recover(); r != nil {
		fmt.Println("Ocurrio un error:", r)
	}
}

func main() {
	defer manejarPanic()

	fmt.Println("inicio de la ejecucion")
	resultado := dividirConPanic(5, 0)
	fmt.Println("Resultado de la division", resultado)
	fmt.Println("Fin programa")
}

##POO VS GO##

creacion de clases 

//Programacion Orientada a Objetos en Go
// go no tiene clases, tiene structs
// go no tiene herencia, tiene embedding de structs (composicion)
// go no tiene constructores, tiene funciones de newType(..)
// go no tiene modificadores de acceso, tiene publico y privado
// go no tiene polimorfismo, tiene interfaces implicitas (duck typing)
// interfaces en go son implicitas, no es necesario implementarlas
// interfaces en go pueden tener metodos de instancia y de tipo
// interfaces en go pueden tener metodos con el mismo nombre
// interfaces en go pueden tener metodos con el mismo nombre y diferente firma
// interfaces en go pueden tener metodos con el mismo nombre y diferente firma
// interfaces en go pueden tener metodos con el mismo nombre y diferente firma

package main

import "fmt"

type Persona struct {
	Nombre string
	Edad   int
}

//metodos asociados a la struct Persona

func (p Persona) Saludar() {
	fmt.Println("Hola, mi nombre es", p.Nombre)
}

func main() {
	persona := Persona{Nombre: "Juan", Edad: 20}
	persona.Saludar()
}

##MANEJO DE ARCHIVOS##

package main

import (
	"fmt"
	"os"
)

// manejo de archivos en go

func main() {
	fileName := "ejemplo.txt"

	//leer archivo completo

	content, err := os.ReadFile(fileName)
	if err != nil {
		fmt.Println("Error al leer el archivo:  ", err)
		return
	}

	fmt.Print("Contenido del archivo: ")
	fmt.Println(string(content))
}

##Escribir texto en un archivo en go ##

package main

import (
	"fmt"
	"os"
)

func main() {
	fileName := "test.txt"
	text := "Hola desde el archivo en go"

	file, err := os.Create(fileName)
	if err != nil {
		fmt.Println("Error al crear el archivo:", err)
		return
	}
	defer file.Close()

	_, err = file.WriteString(text)
	if err != nil {
		fmt.Println("Error al escribir en el archivo:", err)
		return
	}

	fmt.Println("Archivo creado y contenido escrito correctamente")
}
